import java.util.*;

public class Solution {
    public static boolean f(int index, int target, int[] arr, Boolean[][] dp) {
        if (target == 0) {
            return true;
        }
        if (index == 0) {
            return (arr[0] == target);
        }
        if (dp[index][target] != null) {
            return dp[index][target];
        }
        boolean not_take = f(index - 1, target, arr, dp);
        boolean take = false;
        if (target >= arr[index]) {
           
            take = f(index - 1, target - arr[index], arr, dp);
        }

        return dp[index][target] = (take || not_take);
    }

    public static boolean subsetSumToK(int n, int k, int arr[]) {
        Boolean dp[][] = new Boolean[n][k + 1];
        return f(n - 1, k, arr, dp);
    }

}
