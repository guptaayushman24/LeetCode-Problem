class Solution {
    public static boolean f(int[] nums, int[][] dp, int index, int target) {
        if (target == 0) {
            return true;
        }
        if (index == 0) {
            return target == nums[0];
        }
        if (dp[index][target] != -1) {
            if (dp[index][target]==0){
                return false;
            }
            else{
                return true;
            }
        }
       
        boolean not_take = f(nums, dp, index - 1, target);
        boolean take = false;
        if (target >= nums[index]) {
            take = f(nums, dp, index - 1, target - nums[index]);
        }

        if (not_take || take){
            dp[index][target]=1;
        }
        else{
            dp[index][target]=0;
        }
        return (take || not_take);

        
    }

    public boolean canPartition(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
        }
        if (sum % 2 != 0) {
            return false;
        }
        int target = sum / 2;
        int n = nums.length; // Length of nums
        int[][] dp = new int[n][target + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return f(nums, dp, nums.length - 1, target);
    }
}
