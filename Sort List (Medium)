/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static void conquer(int []arr,int si,int mid,int ei){
        int [] merge = new int[ei-si+1];
        int idx1=si;
        int idx2=mid+1;
        int x=0;

        while (idx1<=mid && idx2<=ei){
            if (arr[idx1]<=arr[idx2]){
                merge[x++] = arr[idx1++];
            }
            else{
                merge[x++] = arr[idx2++];
            }
        }
        while (idx1<=mid){
            merge[x++] = arr[idx1++];
        }
        while (idx2<=ei){
            merge[x++] = arr[idx2++];
        }
        for (int i=0,j=si;i<merge.length;i++,j++){
            arr[j] = merge[i]; 
        }
    }
    public static void divide (int [] arr,int si,int ei){
        if (si>=ei){
            return;
        }
        int mid = si+(ei-si)/2;

        divide(arr,si,mid);
        divide(arr,mid+1,ei);
        conquer(arr,si,mid,ei);
    }
    public ListNode sortList(ListNode head) {
        ListNode ptr1 = head;
        ListNode ptr2 = head;
        int size=0;
        while (ptr1!=null){
            size++;
          
            ptr1 = ptr1.next;
        }
    int [] arr =new int[size];
    int x=0;
    while(ptr2!=null){
        arr[x] = ptr2.val;
        ptr2 = ptr2.next;
        x++;
    }
    divide(arr,0,size-1);

    ListNode newHead = null;
    ListNode currNode = null;
    for (int i=0;i<arr.length;i++){
    ListNode newNode = new ListNode(arr[i]);
    if (newHead==null){
        newHead = newNode;
        currNode = newNode;
    }
    else{
        currNode.next = newNode;
        currNode = currNode.next;
    }

    }
    return newHead;

}
}
    
