class Solution {
    public static int f(int index,int buy,int cap,int [] prices,int n,int[][][] dp){
        if (index==n){
            return 0;
        }
        if (cap==0){
            return 0;
        }
        if (dp[index][buy][cap]!=-1){
            return dp[index][buy][cap];
        }
        if (buy==1){
            return dp[index][buy][cap] = Math.max(-prices[index]+f(index+1,0,cap,prices,n,dp),0+f(index+1,1,cap,prices,n,dp));
        }
        else{
          return dp[index][buy][cap]=Math.max(prices[index] + f(index + 1, 1, cap - 1, prices, n,dp), 0 + f(index + 1, 0, cap, prices, n,dp));
       
        }
    }
    
    public int maxProfit(int[] prices) {
        
        int n = prices.length;
        int [][][] dp = new int[n][2][3];
        for (int i=0;i<n;i++){
            for (int j=0;j<2;j++){
                for (int k=0;k<3;k++){
                    dp[i][j][k]=-1;
                }
            }
        }
        return f(0,1,2,prices,n,dp);
    }
}
