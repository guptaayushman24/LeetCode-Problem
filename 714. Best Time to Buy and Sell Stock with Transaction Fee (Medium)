class Solution {
    public static int f(int index,int buy,int [] prices,int n,int fee,int [][] dp){
        if (index==n){
            return 0;
        }
        if (dp[index][buy]!=-1){
            return dp[index][buy];
        }
        if (buy==1){
            return dp[index][buy] = Math.max(-prices[index]+f(index+1,0,prices,n,fee,dp),0+f(index+1,1,prices,n,fee,dp));
        }
        else{
            return dp[index][buy] = Math.max(prices[index]-fee+f(index+1,1,prices,n,fee,dp),0+f(index+1,0,prices,n,fee,dp));
        }
    }
    public int maxProfit(int[] prices, int fee) {
     
        int n = prices.length;
        int [][]dp = new int[n][2];
        for (int i=0;i<n;i++){
            for (int j=0;j<2;j++){
                dp[i][j]=-1;
            }
        }
        return f(0,1,prices,n,fee,dp);
    }

}
