/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
# Here I use the extra space and created the array list
class Solution {
    public ListNode swapPairs(ListNode head) {
        ArrayList<Integer> al = new ArrayList<Integer>();
        if (head==null){
            return null;
      
}

        if (head.next==null){
            return head;
        }

        ListNode temp = head;
        while (temp!=null){
            al.add(temp.val);
            temp = temp.next;
        }

        int i=0;
        int j=1;
        while (i<al.size() && j<al.size()){
           int temp1 = al.get(i);
           al.set(i,al.get(j));
           al.set(j,temp1);
           i+=2;
           j+=2;
        }

        ListNode newHead = null;
        ListNode currNode = null;
        for (int k=0;k<al.size();k++){
            ListNode newNode = new ListNode(al.get(k));
            if (newHead==null){
                newHead = newNode;
                currNode = newNode;
            }
            else{
                currNode.next = newNode;
                currNode = currNode.next;
            }
        }
        return newHead;
    }
}




 
