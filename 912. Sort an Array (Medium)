class Solution {
    public static void max_heap(int [] nums,int n,int i){
        int left = 2*i+1;
        int right = 2*i+2;
        int largest = i;
        if (left<n && nums[largest]<nums[left]){
            largest = left;
        }
        if (right<n && nums[largest]<nums[right]){
            largest=right;
        }
        if (i!=largest){
            int temp = nums[i];
            nums[i] = nums[largest];
            nums[largest] = temp;
            max_heap(nums,n,largest);

        }
    }
    public static void build_heap(int [] nums,int n){
        for (int i=(n-2)/2;i>=0;i--){
            max_heap(nums,n,i);
        }
    }
    public int[] sortArray(int[] nums) {
         int n = nums.length;
        build_heap(nums,n);
        for (int i=nums.length-1;i>=1;i--){
            int temp = nums[0];
            nums[0] = nums[i];
            nums[i] = temp;
            max_heap(nums,i,0);
        }

        return nums;
        
        
    }
}
