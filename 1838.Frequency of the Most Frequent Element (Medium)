import java.util.*;

class Solution {
    public boolean possible(int[] nums, int mid, int k) {
        long windowsum = 0, totalsum = 0;
        for (int i = 0; i < mid; ++i)
            windowsum += nums[i];

        totalsum = 1L * nums[mid - 1] * mid;

        if (totalsum - windowsum <= k)
            return true;

        int j = 0;
        for (int i = mid; i < nums.length; ++i) {
            windowsum -= nums[j];
         
            windowsum += nums[i];
            totalsum = totalsum = 1L * nums[i] * mid;

            if (totalsum - windowsum <= k)
                return true;
            j++;
        }

        return false;
    }

    public int maxFrequency(int[] nums, int k) {
        int l = 1, h = nums.length, ans = 0;
        Arrays.sort(nums);

        while (l <= h) {
            int mid = l + (h - l) / 2;
            if (possible(nums, mid, k)) {
                ans = mid;
                l = mid + 1;
            } else
                h = mid - 1;
        }

        return ans;
    }
}
